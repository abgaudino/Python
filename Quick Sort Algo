#Quick sort

#use the pivot to compare all numbers to move < values to left partition and > items to right partition
#the median of three pivots (first, middle, last) will be used

#recursive method, very efficient on large data sets
#worst case is O(n^2), average case is O(n log n), depends on pivot selection

A = [6,7,8,6,4,3,2,1,9,22,66,55,69,78,12,15]

def quick_sort(A):
  quick_sort2(A, 0, len(A)-1)

def quick_sort2(A, low, hi):
  #if low < high:
  if hi-low < threshold and low < hi:
    quick_selection(A, low, hi)
  elif low < hi:
    p = partition(A, low, hi)
    quick_sort2(A, low, p - 1)
    quick_sort2(A, p + 1, hi)

  def get_pivot(A, low, hi):
    mid = (hi +low) // 2
    pivot = hi
    if A[low] < A[mid]:
      pivot = mid
    elif A[low] < A[hi]:
      pivot = low
    return pivot

  def partition(A, low, hi):
    pivotIndex = get_pivot(A, low, hi)
    pivotValue = A[pivotIndex]
    A[pivotIndex], A[low] = A[low], A[pivotIndex]
    border = low

    for i in range(low, hi+1):
      if A[i] <pivotValue:
        border += 1
        A[i], A[border] = A[border], A[i]
    A[low], A[border] = A[border], A[low]

    return(border)
  
